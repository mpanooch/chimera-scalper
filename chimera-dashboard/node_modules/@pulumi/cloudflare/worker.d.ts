import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/worker:Worker example '<account_id>/<worker_id>'
 * ```
 */
export declare class Worker extends pulumi.CustomResource {
    /**
     * Get an existing Worker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerState, opts?: pulumi.CustomResourceOptions): Worker;
    /**
     * Returns true if the given object is an instance of Worker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Worker;
    /**
     * Identifier.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * When the Worker was created.
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    readonly logpush: pulumi.Output<boolean>;
    /**
     * Name of the Worker.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Observability settings for the Worker.
     */
    readonly observability: pulumi.Output<outputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    readonly subdomain: pulumi.Output<outputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    readonly tags: pulumi.Output<string[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    readonly tailConsumers: pulumi.Output<outputs.WorkerTailConsumer[]>;
    /**
     * When the Worker was most recently updated.
     */
    readonly updatedOn: pulumi.Output<string>;
    /**
     * Create a Worker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Worker resources.
 */
export interface WorkerState {
    /**
     * Identifier.
     */
    accountId?: pulumi.Input<string>;
    /**
     * When the Worker was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the Worker.
     */
    name?: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    subdomain?: pulumi.Input<inputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerTailConsumer>[]>;
    /**
     * When the Worker was most recently updated.
     */
    updatedOn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Worker resource.
 */
export interface WorkerArgs {
    /**
     * Identifier.
     */
    accountId: pulumi.Input<string>;
    /**
     * Whether logpush is enabled for the Worker.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Name of the Worker.
     */
    name: pulumi.Input<string>;
    /**
     * Observability settings for the Worker.
     */
    observability?: pulumi.Input<inputs.WorkerObservability>;
    /**
     * Subdomain settings for the Worker.
     */
    subdomain?: pulumi.Input<inputs.WorkerSubdomain>;
    /**
     * Tags associated with the Worker.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Other Workers that should consume logs from the Worker.
     */
    tailConsumers?: pulumi.Input<pulumi.Input<inputs.WorkerTailConsumer>[]>;
}
