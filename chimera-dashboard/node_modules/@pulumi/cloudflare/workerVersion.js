"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerVersion = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerVersion:WorkerVersion example '<account_id>/<worker_id>/<version_id>'
 * ```
 */
class WorkerVersion extends pulumi.CustomResource {
    /**
     * Get an existing WorkerVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkerVersion(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkerVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerVersion.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["assets"] = state ? state.assets : undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["compatibilityDate"] = state ? state.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = state ? state.compatibilityFlags : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["mainModule"] = state ? state.mainModule : undefined;
            resourceInputs["migrations"] = state ? state.migrations : undefined;
            resourceInputs["modules"] = state ? state.modules : undefined;
            resourceInputs["number"] = state ? state.number : undefined;
            resourceInputs["placement"] = state ? state.placement : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["usageModel"] = state ? state.usageModel : undefined;
            resourceInputs["workerId"] = state ? state.workerId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.workerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["compatibilityDate"] = args ? args.compatibilityDate : undefined;
            resourceInputs["compatibilityFlags"] = args ? args.compatibilityFlags : undefined;
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["mainModule"] = args ? args.mainModule : undefined;
            resourceInputs["migrations"] = args ? args.migrations : undefined;
            resourceInputs["modules"] = args ? args.modules : undefined;
            resourceInputs["placement"] = args ? args.placement : undefined;
            resourceInputs["usageModel"] = args ? args.usageModel : undefined;
            resourceInputs["workerId"] = args ? args.workerId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["number"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkerVersion.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkerVersion = WorkerVersion;
/** @internal */
WorkerVersion.__pulumiType = 'cloudflare:index/workerVersion:WorkerVersion';
//# sourceMappingURL=workerVersion.js.map